// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hiennguyen9874/go-boilerplate-v2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// IsSuperUser applies equality check predicate on the "is_super_user" field. It's identical to IsSuperUserEQ.
func IsSuperUser(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsSuperUser, v))
}

// Verified applies equality check predicate on the "verified" field. It's identical to VerifiedEQ.
func Verified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerified, v))
}

// VerificationCode applies equality check predicate on the "verification_code" field. It's identical to VerificationCodeEQ.
func VerificationCode(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerificationCode, v))
}

// PasswordResetToken applies equality check predicate on the "password_reset_token" field. It's identical to PasswordResetTokenEQ.
func PasswordResetToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordResetToken, v))
}

// PasswordResetAt applies equality check predicate on the "password_reset_at" field. It's identical to PasswordResetAtEQ.
func PasswordResetAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordResetAt, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsActive, v))
}

// IsSuperUserEQ applies the EQ predicate on the "is_super_user" field.
func IsSuperUserEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsSuperUser, v))
}

// IsSuperUserNEQ applies the NEQ predicate on the "is_super_user" field.
func IsSuperUserNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsSuperUser, v))
}

// VerifiedEQ applies the EQ predicate on the "verified" field.
func VerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerified, v))
}

// VerifiedNEQ applies the NEQ predicate on the "verified" field.
func VerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldVerified, v))
}

// VerificationCodeEQ applies the EQ predicate on the "verification_code" field.
func VerificationCodeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerificationCode, v))
}

// VerificationCodeNEQ applies the NEQ predicate on the "verification_code" field.
func VerificationCodeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldVerificationCode, v))
}

// VerificationCodeIn applies the In predicate on the "verification_code" field.
func VerificationCodeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldVerificationCode, vs...))
}

// VerificationCodeNotIn applies the NotIn predicate on the "verification_code" field.
func VerificationCodeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldVerificationCode, vs...))
}

// VerificationCodeGT applies the GT predicate on the "verification_code" field.
func VerificationCodeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldVerificationCode, v))
}

// VerificationCodeGTE applies the GTE predicate on the "verification_code" field.
func VerificationCodeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldVerificationCode, v))
}

// VerificationCodeLT applies the LT predicate on the "verification_code" field.
func VerificationCodeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldVerificationCode, v))
}

// VerificationCodeLTE applies the LTE predicate on the "verification_code" field.
func VerificationCodeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldVerificationCode, v))
}

// VerificationCodeContains applies the Contains predicate on the "verification_code" field.
func VerificationCodeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldVerificationCode, v))
}

// VerificationCodeHasPrefix applies the HasPrefix predicate on the "verification_code" field.
func VerificationCodeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldVerificationCode, v))
}

// VerificationCodeHasSuffix applies the HasSuffix predicate on the "verification_code" field.
func VerificationCodeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldVerificationCode, v))
}

// VerificationCodeIsNil applies the IsNil predicate on the "verification_code" field.
func VerificationCodeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldVerificationCode))
}

// VerificationCodeNotNil applies the NotNil predicate on the "verification_code" field.
func VerificationCodeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldVerificationCode))
}

// VerificationCodeEqualFold applies the EqualFold predicate on the "verification_code" field.
func VerificationCodeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldVerificationCode, v))
}

// VerificationCodeContainsFold applies the ContainsFold predicate on the "verification_code" field.
func VerificationCodeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldVerificationCode, v))
}

// PasswordResetTokenEQ applies the EQ predicate on the "password_reset_token" field.
func PasswordResetTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordResetToken, v))
}

// PasswordResetTokenNEQ applies the NEQ predicate on the "password_reset_token" field.
func PasswordResetTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordResetToken, v))
}

// PasswordResetTokenIn applies the In predicate on the "password_reset_token" field.
func PasswordResetTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswordResetToken, vs...))
}

// PasswordResetTokenNotIn applies the NotIn predicate on the "password_reset_token" field.
func PasswordResetTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswordResetToken, vs...))
}

// PasswordResetTokenGT applies the GT predicate on the "password_reset_token" field.
func PasswordResetTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswordResetToken, v))
}

// PasswordResetTokenGTE applies the GTE predicate on the "password_reset_token" field.
func PasswordResetTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswordResetToken, v))
}

// PasswordResetTokenLT applies the LT predicate on the "password_reset_token" field.
func PasswordResetTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswordResetToken, v))
}

// PasswordResetTokenLTE applies the LTE predicate on the "password_reset_token" field.
func PasswordResetTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswordResetToken, v))
}

// PasswordResetTokenContains applies the Contains predicate on the "password_reset_token" field.
func PasswordResetTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswordResetToken, v))
}

// PasswordResetTokenHasPrefix applies the HasPrefix predicate on the "password_reset_token" field.
func PasswordResetTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswordResetToken, v))
}

// PasswordResetTokenHasSuffix applies the HasSuffix predicate on the "password_reset_token" field.
func PasswordResetTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswordResetToken, v))
}

// PasswordResetTokenIsNil applies the IsNil predicate on the "password_reset_token" field.
func PasswordResetTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPasswordResetToken))
}

// PasswordResetTokenNotNil applies the NotNil predicate on the "password_reset_token" field.
func PasswordResetTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPasswordResetToken))
}

// PasswordResetTokenEqualFold applies the EqualFold predicate on the "password_reset_token" field.
func PasswordResetTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswordResetToken, v))
}

// PasswordResetTokenContainsFold applies the ContainsFold predicate on the "password_reset_token" field.
func PasswordResetTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswordResetToken, v))
}

// PasswordResetAtEQ applies the EQ predicate on the "password_reset_at" field.
func PasswordResetAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordResetAt, v))
}

// PasswordResetAtNEQ applies the NEQ predicate on the "password_reset_at" field.
func PasswordResetAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordResetAt, v))
}

// PasswordResetAtIn applies the In predicate on the "password_reset_at" field.
func PasswordResetAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswordResetAt, vs...))
}

// PasswordResetAtNotIn applies the NotIn predicate on the "password_reset_at" field.
func PasswordResetAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswordResetAt, vs...))
}

// PasswordResetAtGT applies the GT predicate on the "password_reset_at" field.
func PasswordResetAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswordResetAt, v))
}

// PasswordResetAtGTE applies the GTE predicate on the "password_reset_at" field.
func PasswordResetAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswordResetAt, v))
}

// PasswordResetAtLT applies the LT predicate on the "password_reset_at" field.
func PasswordResetAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswordResetAt, v))
}

// PasswordResetAtLTE applies the LTE predicate on the "password_reset_at" field.
func PasswordResetAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswordResetAt, v))
}

// PasswordResetAtIsNil applies the IsNil predicate on the "password_reset_at" field.
func PasswordResetAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPasswordResetAt))
}

// PasswordResetAtNotNil applies the NotNil predicate on the "password_reset_at" field.
func PasswordResetAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPasswordResetAt))
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.Item) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
